<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kaist.user.member_re.service.impl.UserMemberReMapper">
	<!-- 신입생 선발 일정 확인 -->
	 <select id="getConfig" resultType="egovframework.kaist.admin.MemberConfigVo" parameterType="egovframework.kaist.admin.MemberConfigVo">
	 	SELECT * 
	 	FROM TBL_MEMBER_CONFIG
	 	WHERE TYPE = #{TYPE}
	 	AND YEAR = '2024'
	 </select>
	
	<!-- 신입생 선발 자격 확인 -->
	<select id="getDcmntList" resultType="egovframework.kaist.admin.member_re.model.AdminDcmntVo" parameterType="egovframework.kaist.admin.member_re.model.AdminDcmntVo">
		SELECT * 
		FROM TBL_DCMNT 
		GROUP BY DCMNT_TYPE
	</select>
	
	<!-- 신입생 선발 학교 검색 -->
	<select id="getSchoolList" resultType="egovframework.kaist.user.school.model.UserSchoolVo">
		SELECT *
		FROM TBL_SCHOOL
		WHERE SCHOOL_NAME LIKE '%${SEARCH_TEXT}%'
		<if test="SEARCH_TEXT == ''">
			LIMIT 10
		</if>
	</select>
	
	<!-- 신입생 선발 기존 유저 확인 및 가져오기 -->
	<select id="getMemberView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT * 
		FROM TBL_MEMBER
		WHERE 1=1
		AND MEMBER_ID = #{MEMBER_ID}
		AND NAME = #{NAME}
	</select>
	
	
	<!-- 신입생 선발 신청서 등록 (일반 - 각자신청시 유형2 ,3) -->
	<insert id="setMemberReInsert" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		INSERT INTO TBL_MEMBER_RE (MEMBER_ID , PASSWORD , TYPE , TYPE_SUB , LEVEL , NAME , BIRTH , SEX , PHONE , EMAIL , PARENT_PHONE , ZIPCODE , ADDRESS , ADDRESS_DETAIL , ADDRESS_LOCAL , SCHOOL_ADDRESS , SCHOOL_LOCATION , SCHOOL_TYPE , SCHOOL_NAME , SCHOOL_YEAR , SCHOOL_GROUP , ELIGIBILITY , SELF_INTR , MATCHING , CREATE_TM , UPDATE_TM , EXP_DATA , EXP_TYPE , FILE_TYPE)
		VALUES (#{MEMBER_ID} , #{PASSWORD} , #{TYPE} , #{TYPE_SUB} , #{LEVEL} , #{NAME} , #{BIRTH} , #{SEX} , #{PHONE} , #{EMAIL} , #{PARENT_PHONE} , #{ZIPCODE} , #{ADDRESS} , #{ADDRESS_DETAIL} , #{ADDRESS_LOCAL} , #{SCHOOL_ADDRESS} , #{SCHOOL_LOCATION} , #{SCHOOL_TYPE} , #{SCHOOL_NAME} , #{SCHOOL_YEAR} , #{SCHOOL_GROUP} , #{ELIGIBILITY} ,  #{SELF_INTR} , <if test="MATCHING != ''">#{MATCHING}</if><if test="MATCHING == ''">NULL</if> , now() , now() , #{EXP_DATA} , #{EXP_TYPE} , 1)
	</insert>
	
	<!-- 신입생 선발 매칭 카운트 가져오기 -->
	<select id="getMatchingCnt" resultType="String">
		SELECT IFNULL(MATCHING , "0")
		FROM tbl_member_re 
		WHERE MATCHING != ""
		ORDER BY MATCHING DESC 
		LIMIT 1
	</select>
	
	<!-- 신입생 선발 신청서 확인 -->
	<select id="getMemberReView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		<if test="MATCHING == ''">
			SELECT * FROM TBL_MEMBER_RE
			WHERE NAME = #{NAME} 
			AND BIRTH = #{BIRTH}
			AND TYPE = #{TYPE}
			<if test="LEVEL != ''">
				AND LEVEL = #{LEVEL}
			</if>
		</if>
		<if test="MATCHING != ''">
			SELECT * FROM TBL_MEMBER_RE
			WHERE MATCHING = #{MATCHING}
			AND LEVEL = #{LEVEL}
		</if>
	</select>
	
	<!-- 신입생 선발 과거 신청 확인 카운트 -->
	<select id="getMemberReCheck" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="int">
		SELECT COUNT(*) 
		FROM TBL_MEMBER_RE
		WHERE 1 = 1
		AND NAME = #{NAME}
		AND BIRTH = #{BIRTH}
		AND TYPE = #{TYPE}
	</select>
	
	<!-- 신입생 선발 신청서 수정 -->
	<update id="setMemberReUpdate" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		UPDATE TBL_MEMBER_RE SET 
		NAME = #{NAME} ,
		BIRTH = #{BIRTH} ,
		TYPE_SUB = #{TYPE_SUB},
		SEX = #{SEX} ,
		PHONE = #{PHONE} ,
		EMAIL = #{EMAIL} ,
		PARENT_PHONE  = #{PARENT_PHONE} , 
		ZIPCODE = #{ZIPCODE} , 
		ADDRESS = #{ADDRESS} , 
		ADDRESS_DETAIL = #{ADDRESS_DETAIL} , 
		ADDRESS_LOCAL = #{ADDRESS_LOCAL} ,
		SCHOOL_LOCATION = #{SCHOOL_LOCATION},
		SCHOOL_ADDRESS = #{SCHOOL_ADDRESS}, 
		SCHOOL_TYPE = #{SCHOOL_TYPE} , 
		SCHOOL_NAME = #{SCHOOL_NAME} , 
		SCHOOL_YEAR = #{SCHOOL_YEAR} , 
		SCHOOL_GROUP = #{SCHOOL_GROUP} ,
		ELIGIBILITY = #{ELIGIBILITY} ,
		SELF_INTR = #{SELF_INTR} ,
		EXP_DATA = #{EXP_DATA},
		EXP_TYPE = #{EXP_TYPE},
		UPDATE_TM = now()
		WHERE IDX = #{IDX}
	</update>
	
	<!-- 신입생 선발 신청서 삭제 -->
	<delete id="setMemberReDelete" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		DELETE FROM TBL_MEMBER_RE WHERE IDX = #{IDX}
	</delete>
	
	<!-- 신입생 선발 지원자격 가져오기 (IDX로) -->
	<select id="getMemberReELIGIBILITY" resultType="string" parameterType="string">
		SELECT ELIGIBILITY
		FROM TBL_MEMBER_RE
		WHERE IDX = #{value}
	</select>
	
	<!-- 신입생 선발 파일 타입 변경 -->
	<update id="setMemberReFileTypeTwo" parameterType="string">
		UPDATE TBL_MEMBER_RE SET FILE_TYPE = 2
		WHERE IDX = #{value}
	</update>
	
	<!-- 신입생 선발 파일 타입 변경 -->
	<update id="setMemberReFileTypeOne" parameterType="string">
		UPDATE TBL_MEMBER_RE SET FILE_TYPE = 1
		WHERE IDX = #{value}
	</update>
	
	<!-- 신입생 선발 서류 리스트 -->
	<select id="getMemberReDocumentList" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo" resultType="String">
		SELECT NAME FROM TBL_MEMBER_RE_FILE 
		WHERE MEMBER_NAME = #{MEMBER_NAME} 
		AND BIRTH = #{BIRTH}
		AND TITLE = #{TITLE}
	</select>
	
	<!-- 신입생 선발 서류 자격 관련 리스트 -->
	<select id="getDocumentList" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo" resultType="egovframework.kaist.admin.member_re.model.AdminDcmntVo">
		SELECT * FROM TBL_DCMNT
		WHERE DCMNT_TYPE = #{ELIGIBILITY}
	</select>
	
	<!-- 신입생 선발 서류 자격 확인 -->
	<select id="getMemberReDocumentView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo" resultType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo">
		SELECT * FROM TBL_MEMBER_RE_FILE
		WHERE MEMBER_NAME = #{MEMBER_NAME} AND NAME = #{NAME} AND BIRTH = #{BIRTH}
	</select>
	
	<!-- 신입생 선발 서류 갯수 가져오기 -->
	<select id="getMemberReFileListCnt" resultType="int" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo">
		SELECT COUNT(*)
		FROM TBL_MEMBER_RE_FILE
		WHERE MEMBER_IDX = #{MEMBER_IDX}
	</select>
	
	<!-- 신입생 선발 서류 등록해야될 총 갯수 가져오기 -->
	<select id="getMemberReFileFullCnt" resultType="int" parameterType="string">
		SELECT COUNT(*)
		FROM TBL_DCMNT
		WHERE DCMNT_TYPE = #{value}
	</select>
	
	<!-- test -->
	<select id="getMemberReMentoView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		SELECT * FROM TBL_MEMBER_RE
		WHERE NAME = #{NAME} AND TYPE = #{TYPE} AND BIRTH = #{BIRTH}
	</select>
	
	<!-- 신입생 선발 서류 등록 -->
	<insert id="setMemberReFile" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo" >
		INSERT INTO TBL_MEMBER_RE_FILE (MEMBER_NAME , BIRTH , TITLE , NAME , LINK , MEMBER_IDX , CREATE_TM , UPDATE_TM)
		VALUES(#{MEMBER_NAME} , #{BIRTH} , #{TITLE} , #{NAME} , #{LINK} , #{MEMBER_IDX}, now() , now() )
	</insert>
	
	<!-- 신입생 선발 서류 이름 변경 -->
	<update id="setMemberReFileNameChange" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo">
		UPDATE TBL_MEMBER_RE_FILE
		SET MEMBER_NAME = #{MEMBER_NAME}
		WHERE MEMBER_IDX = #{MEMBER_IDX}
	</update>

	<!-- 신입생 선발 서류 링크 확인 -->
	<select id="getFileLinkCheck" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo" resultType="String">
		SELECT LINK FROM TBL_MEMBER_RE_FILE
		WHERE MEMBER_NAME = #{MEMBER_NAME} AND BIRTH = #{BIRTH} AND NAME = #{NAME}
	</select>
	
	<delete id="setMemberReDocumentDelete" parameterType="egovframework.kaist.user.member_re.model.UserMemberReDocumentVo">
		DELETE FROM TBL_MEMBER_RE_FILE WHERE IDX = #{IDX} AND MEMBER_NAME = #{MEMBER_NAME} AND BIRTH = #{BIRTH}
	</delete>
	
	<select id="getMemberPassView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		SELECT *
		FROM TBL_MEMBER_RE
		WHERE NAME LIKE '${NAME}%'
		AND BIRTH = #{BIRTH}
		AND RESULT = 'pass'
		LIMIT 1
	</select>
	
	<!-- 서류 매칭 번호 가져오기 -->
	<select id="getMatchingView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="String">
		SELECT MATCHING FROM TBL_MEMBER_RE
		WHERE IDX = #{IDX}
	</select>
	
	<!-- 유형 1 레벨별 가져오기 -->
	<select id="getMemberReMatchingView" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="egovframework.kaist.user.member_re.model.UserMemberReVo">
		SELECT * FROM TBL_MEMBER_RE
		WHERE MATCHING = #{MATCHING} AND LEVEL = #{LEVEL}
	</select>
	
	<!-- MemberRe쪽 Id 갯수 확인 --> 
	<select id="getMemberReIdCheck" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="int">
		SELECT COUNT(*) FROM TBL_MEMBER
		WHERE NAME = #{NAME} AND PHONE = #{PHONE}
	</select>
	
	<!-- MemberRe쪽 Id 가져오기 --> 
	<select id="getMemberReIdCheckGet" parameterType="egovframework.kaist.user.member_re.model.UserMemberReVo" resultType="String">
		SELECT MEMBER_ID FROM TBL_MEMBER
		WHERE NAME = #{NAME} AND PHONE = #{PHONE} ORDER BY CREATE_TM LIMIT 1
	</select>
	

	
</mapper>