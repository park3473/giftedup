<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kaist.admin.matching.service.impl.AdminMatchingMapper">
	 
	<select id="getListAll" resultType="hashMap" >
		SELECT /*AdminMatchingMapper*/ * FROM TBL_MATCHING order by CREATE_TM desc
	</select>

	
	<select id="getList" resultType="hashMap" parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		SELECT * FROM (
			SELECT /*AdminMatchingMapper*/ *
				, (SELECT SCHOOL_NUMBER FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS SCHOOL_NUMBER
				, (SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS NAME
				, (SELECT PHONE FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS PHONE
				,  (SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.PROFESSOR_MEMBER_ID) AS PROFESSOR_MEMBER_NAME
			FROM TBL_MATCHING
		) AS A
		
		
		WHERE 1=1 
		AND YEAR = #{YEAR}
		<if test="PROFESSOR_MEMBER_ID != ''">
	    	AND PROFESSOR_MEMBER_ID = #{PROFESSOR_MEMBER_ID}
	    </if>
	   	<if test="YEAR != ''">
	    	AND YEAR = #{YEAR}
	    </if>
	   	<if test="SUPPORT_GROUP != ''">
	    	AND SUPPORT_GROUP = #{SUPPORT_GROUP}
	    </if>	    
	   	<if test="ENROLLMENT_STATUS != ''">
	    	AND ENROLLMENT_STATUS = #{ENROLLMENT_STATUS}
	    </if>	    
	    
	     <if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
		    		NAME LIKE '%${SEARCH_TEXT}%' 
		    		OR  A.MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  A.SCHOOL_NAME LIKE '%${SEARCH_TEXT}%'
		    		OR  A.PROFESSOR_MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  A.PROFESSOR_MEMBER_NAME LIKE '%${SEARCH_TEXT}%'
		    		
		    		
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if>

		order by UPDATE_TM desc
		
		LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>
		
	<select id="getListCnt" resultType="int" parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		SELECT count(*) FROM (SELECT 
			*
				, (SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS NAME
				, (SELECT PHONE FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS PHONE
				
				,  (SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.PROFESSOR_MEMBER_ID) AS PROFESSOR_MEMBER_NAME
		
			FROM TBL_MATCHING
		) AS A
		
		WHERE 1=1 
		AND YEAR = #{YEAR}
		<if test="PROFESSOR_MEMBER_ID != ''">
	    	AND PROFESSOR_MEMBER_ID = #{PROFESSOR_MEMBER_ID}
	    </if>
	   	<if test="YEAR != ''">
	    	AND YEAR = #{YEAR}
	    </if>
	   	<if test="SUPPORT_GROUP != ''">
	    	AND SUPPORT_GROUP = #{SUPPORT_GROUP}
	    </if>	    
	   	<if test="SUPPORT_GROUP != ''">
	    	AND ENROLLMENT_STATUS = #{ENROLLMENT_STATUS}
	    </if>	    
	    
	     <if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
		    		NAME LIKE '%${SEARCH_TEXT}%' 
		    		OR  A.MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  A.SCHOOL_NAME LIKE '%${SEARCH_TEXT}%'
		    		OR  A.NAME LIKE '%${SEARCH_TEXT}%'
		    		OR  A.PROFESSOR_MEMBER_ID LIKE '%${SEARCH_TEXT}%'

		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    	
	    </if>

	</select>
	
	<select id="getListGroupByYear" resultType="hashMap" >
		SELECT /*AdminMatchingMapper*/ * FROM TBL_MATCHING GROUP BY YEAR ORDER BY YEAR DESC
	</select>
	<select id="getListGroupBySUPPORT_GROUP" resultType="hashMap" >
		SELECT /*AdminMatchingMapper*/ * FROM TBL_MATCHING GROUP BY SUPPORT_GROUP ORDER BY YEAR DESC
	</select>
	<select id="getListGroupByENROLLMENT_STATUS" resultType="hashMap" >
		SELECT /*AdminMatchingMapper*/ * FROM TBL_MATCHING GROUP BY ENROLLMENT_STATUS ORDER BY ENROLLMENT_STATUS DESC
	</select>	
	

	<select id="getView" resultType="egovframework.kaist.admin.matching.model.AdminMatchingVo" parameterType="String">
		SELECT /*AdminMatchingMapper*/ *,
		(SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS NAME FROM TBL_MATCHING where MEMBER_ID = #{value};
	</select>
	

	<insert id="setInsert"	parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		INSERT INTO /*AdminMatchingMapper*/ TBL_MATCHING (
			MEMBER_ID, 
			PROFESSOR_MEMBER_ID, 
			SUPPORT_GROUP, 
			YEAR, 
			SCHOOL_NAME, 
			SCHOOL_YEAR, 
			SCHOOL_GROUP, 
						 
			ENROLLMENT_STATUS, 
			FILES, 
			MEMO, 
			CREATE_TM, 
			UPDATE_TM 

		) VALUES (
			#{MEMBER_ID}, 
			#{PROFESSOR_MEMBER_ID}, 
			#{SUPPORT_GROUP}, 
			#{YEAR}, 

			#{SCHOOL_NAME}, 
			#{SCHOOL_YEAR}, 
			#{SCHOOL_GROUP}, 
			 
			#{ENROLLMENT_STATUS}, 
			#{FILES}, 
			#{MEMO}, 
			now(), 
			now() 
		) 
	</insert>

	<update id="setUpdate"	parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		UPDATE /*AdminMatchingMapper*/ TBL_MATCHING SET 
			PROFESSOR_MEMBER_ID= #{PROFESSOR_MEMBER_ID},
			<if test="FILES != ''"> 
			FILES= #{FILES}, 
			</if>
			UPDATE_TM= now() 
		WHERE
			MEMBER_ID = #{MEMBER_ID} 
			AND YEAR= #{YEAR}
	</update>
	
	
	<delete id="setDelete"	parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		DELETE FROM /*AdminMatchingMapper*/
			TBL_MATCHING
		WHERE MEMBER_ID =  #{MEMBER_ID}
		<if test="PROFESSOR_MEMBER_ID != ''">
		AND  PROFESSOR_MEMBER_ID = #{PROFESSOR_MEMBER_ID}
		</if>
		AND YEAR = #{YEAR}
	</delete>
	<update id="setUpdateTypeToText"	parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		UPDATE /*AdminMemberMapper*/ TBL_MATCHING SET 
			${SEARCH_TYPE} = #{SEARCH_TEXT},
			UPDATE_TM = now()
		WHERE
			MEMBER_ID = #{MEMBER_ID} 
	</update>
	<select id="getMatchingNotMemberList" resultType="hashMap" parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		SELECT /*AdminMemberMapper*/ A.* FROM (SELECT * FROM TBL_MEMBER WHERE TYPE = 1) AS A
		LEFT JOIN
		  (SELECT MEMBER_ID FROM TBL_MATCHING <if test="YEAR != ''">WHERE YEAR =#{YEAR}</if>) AS B ON A.MEMBER_ID = B.MEMBER_ID
		WHERE B.MEMBER_ID IS NULL AND ADDRESS_LOCAL = #{LOCATION}  AND EXP_DATA LIKE '%${EXP_DATA}%' ORDER BY A.NAME
	</select>
	
	<select id="getOneList" resultType="hashMap" parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		SELECT * FROM TBL_MATCHING
		WHERE MEMBER_ID = #{MEMBER_ID}
		AND PROFESSOR_MEMBER_ID = #{PROFESSOR_MEMBER_ID}
	</select>
	
	<select id="getViewCheck" resultType="egovframework.kaist.admin.matching.model.AdminMatchingVo" parameterType="egovframework.kaist.admin.matching.model.AdminMatchingVo">
		SELECT /*AdminMatchingMapper*/ *,
		(SELECT NAME FROM TBL_MEMBER WHERE MEMBER_ID = TBL_MATCHING.MEMBER_ID) AS NAME FROM TBL_MATCHING where MEMBER_ID = #{MEMBER_ID} and YEAR = #{YEAR}
	</select>
    
</mapper>