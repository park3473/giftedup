<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.kaist.admin.exam.service.impl.AdminExamMapper">

	<select id="getExamAllList" resultType="hashMap"  parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		SELECT * FROM TBL_EXAM
		WHERE 1=1
		<if test="SEARCH_TEXT != ''">
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if>
	   	ORDER BY CREATE_TM DESC
	    LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>
	
	<select id="getAllListCnt" resultType="int" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		SELECT COUNT(*) FROM TBL_EXAM
		WHERE 1=1
		<if test="SEARCH_TEXT != ''">
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if> 
	</select>
	
	<insert id="setAdminExamDataInsert" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		INSERT INTO TBL_EXAM (NAME , CATEGORY , ONOFF , CONTENT , COMENT ,  CREATE_TM , UPDATE_TM)
		VALUES(#{name} , #{category} , 0 , #{content} , #{coment} , now() , now())
	</insert>
	
	<update id="setAdminExamDataUpdate" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		UPDATE TBL_EXAM SET
		<if test="name != ''">
			NAME = #{name},
		</if>
		<if test="onoff != ''">
		ONOFF = #{onoff},
		</if>
		<if test="content != ''">
		CONTENT = #{content},
		</if>
		<if test="coment != ''">
			COMENT = #{coment},
		</if>
		<if test="start_tm != ''">
		START_TM = #{start_tm},
		</if>
		<if test="end_tm != ''">
		END_TM = #{end_tm},
		</if>
		UPDATE_TM = now()
		
		WHERE IDX = #{idx}
	</update>
	
	<delete id="setAdminExamDataDelete" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		DELETE FROM TBL_EXAM WHERE IDX = #{idx}
	</delete>
	
	<select id="getExamView" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="egovframework.kaist.admin.exam.model.AdminExamVo">
		SELECT * FROM TBL_EXAM
		WHERE IDX = #{idx}
	</select>
	
	<select id="getExamCategoryList" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="hashMap">
		<if test="l_category != ''">
			SELECT L_CATEGORY FROM TBL_EXAM
			ORDER BY L_CATEGORY
		</if>
		<if test="m_category != ''">
			SELECT M_CATEGORY FROM TBL_EXAM
			ORDER BY M_CATEGORY
		</if>
	</select>
	
	<!-- question_list 부분 -->
	<select id="getQuestionList" parameterType="egovframework.kaist.admin.question.model.AdminQuestionListVo" resultType="hashMap">
		SELECT LIST.* , Q.NAME , Q.TYPE , Q.CONTENT , Q.SELECT_TYPE FROM TBL_QUESTION_LIST LIST JOIN TBL_QUESTION Q ON LIST.QUESTION_IDX = Q.IDX
		WHERE EXAM_IDX = #{exam_idx}
		ORDER BY SEQ
	</select>
	
	<insert id="setAdminExamQuestionListInsert" parameterType="egovframework.kaist.admin.question.model.AdminQuestionListVo">
		INSERT INTO TBL_QUESTION_LIST (EXAM_IDX , SEQ , QUESTION_IDX , CREATE_TM , UPDATE_TM)
		VALUES (#{exam_idx} , #{seq} , #{question_idx} , now() , now())
	</insert>
	
	<update id="setAdminExamQuestionListUpdate" parameterType="egovframework.kaist.admin.question.model.AdminQuestionListVo">
		UPDATE TBL_QUESTION_LIST SET
		<if test="question_idx != ''">
			QUESTION_IDX = #{question_idx},
		</if>
		<if test="seq != ''">
			SEQ = #{seq},
		</if>
		UPDATE_TM = now()
		WHERE IDX = #{idx}
	</update>
	
	<delete id="setAdminExamQuestionListDelete" parameterType="egovframework.kaist.admin.question.model.AdminQuestionListVo">
		DELETE FROM TBL_QUESTION_LIST
		WHERE IDX = #{idx}
	</delete>
	
	<select id="getStatusQuestionList" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="hashMap">
		SELECT Q.*, COUNT(S.idx) AS select_count , GROUP_CONCAT(S.content ORDER BY S.seq SEPARATOR '#') AS Choices
		FROM TBL_QUESTION Q
		JOIN TBL_QUESTION_LIST L ON Q.idx = L.question_idx 
		LEFT JOIN TBL_SELECT S ON Q.idx = S.question_idx
		WHERE L.exam_idx = #{idx}
		GROUP BY Q.idx
		ORDER BY L.SEQ
	</select>
	
	<select id="getExamResultMemberAll" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="hashMap">
		SELECT 
	    	er.idx , er.member_id , er.select_list
		FROM 
		    TBL_EXAM_RESULT er
		JOIN 
		    TBL_EXAM e ON er.exam_idx = e.idx
		WHERE 
		    e.idx = #{idx}
	</select>
	
	<update id="setAdminExamQuestionSort" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo">
		SET @seq = 0;
		UPDATE TBL_QUESTION_LIST
		SET seq = @seq := @seq + 1
		WHERE exam_idx = #{exam_idx}
		ORDER BY seq
	</update>
	
	<select id="getRespondentsList" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo" resultType="hashMap">
		SELECT * FROM TBL_EXAM_RESPONDENTS
		WHERE EXAM_IDX = #{exam_idx}
	</select>
	
	<select id="getExamRespondentsAjaxListCnt" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo" resultType="int">
		SELECT COUNT(*) FROM TBL_EXAM_RESPONDENTS
		WHERE EXAM_IDX = #{exam_idx}
	</select>
	
	<select id="getNoRespondentsList" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo" resultType="hashMap">
		SELECT m.member_id AS member_id , m.name AS name , m.phone AS phone , m.school_name AS school_name , m.type AS type
		FROM TBL_MEMBER m
		LEFT JOIN TBL_EXAM_RESPONDENTS e ON m.MEMBER_ID = e.member_id AND e.exam_idx = #{exam_idx}
		WHERE e.idx IS NULL AND m.phone IS NOT NULL AND m.phone != '' AND m.phone != '0' AND m.phone not like '%-%'
		<if test="member_id != ''">
			AND m.member_id like '${member_id}%'
		</if> 
		<if test="type != ''">
			AND m.type = #{type}
		</if> 
	</select>
	
	<insert id="setExamRespondentsInsert" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo">
		INSERT INTO TBL_EXAM_RESPONDENTS(EXAM_IDX , MEMBER_ID , TYPE , SCHOOL_NAME , NAME , PHONE , RESPONDENTS) VALUES (#{exam_idx} , #{member_id} , #{type} , #{school_name} , #{name} , #{phone} , 'no')
	</insert>
	
	<delete id="setExamRespondentsDelte" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo">
		DELETE FROM TBL_EXAM_RESPONDENTS WHERE IDX = #{idx}
	</delete>
	
	<select id="getRespondentsResultList" parameterType="egovframework.kaist.admin.exam.model.AdminExamRespondentsVo">
		SELECT MEMBER_ID , NAME , PHONE , SCHOOL_NAME FROM TBL_EXAM_RESPONDENTS WHERE EXAM_IDX = #{exam_idx} AND RESPONDENTS = 'yes'
	</select>
	
	<select id="getExamRespondentsTotalCnt" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="int">
		SELECT COUNT(*) AS TOTAL_CNT FROM tbl_exam_respondents WHERE exam_idx = #{idx}
	</select>

	<select id="getExamRespondentsCnt" parameterType="egovframework.kaist.admin.exam.model.AdminExamVo" resultType="int">
		SELECT COUNT(*) AS RESPON_CNT FROM tbl_exam_respondents WHERE exam_idx = #{idx} AND respondents = 'yes'
	</select>
	
	<select id="getExamResultView" parameterType="egovframework.kaist.admin.exam.model.AdminExamResultVo" resultType="egovframework.kaist.admin.exam.model.AdminExamResultVo">
		SELECT * FROM TBL_EXAM_RESULT WHERE MEMBER_ID = #{member_id} AND EXAM_IDX = #{exam_idx}
	</select>


</mapper>