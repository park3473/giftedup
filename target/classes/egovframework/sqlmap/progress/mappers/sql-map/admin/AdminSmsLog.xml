<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kaist.admin.sms_log.service.impl.AdminSmsLogMapper">
	 
	<select id="getListAll" resultType="hashMap" >
		SELECT /*AdminSmsLogMapper*/ * FROM TBL_SMS_LOG order by CREATE_TM desc
	</select>
	
	
	<select id="getListSmsSend" resultType="hashMap" >
		SELECT /*AdminSmsLogMapper*/ * FROM TBL_SMS_LOG
		WHERE
			STATUS = 0
		 <![CDATA[
		AND 
			RESERVATION_TM < now()
		]]>
		order by 
			CREATE_TM asc
	</select>
	

	
	<select id="getList" resultType="hashMap" parameterType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo">
		SELECT /*AdminSmsLogMapper*/ * FROM TBL_SMS_LOG
		WHERE 1=1 
		<if test="MEMBER_ID != ''">
	    	AND MEMBER_ID = #{MEMBER_ID}
	    </if>
	    
	    <if test="TYPE != ''">
	    	AND TYPE = #{TYPE}
	    </if>
	    
	    	    
	  	<if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
	    		    MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  MESSAGE LIKE '%${SEARCH_TEXT}%'
		    		OR  PHONE LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    	
	    </if>
	    
	    
		order by CREATE_TM desc
		
		LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>
	
	
		
	<select id="getListCnt" resultType="int" parameterType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo">
		SELECT /*AdminSmsLogMapper*/ count(*) FROM TBL_SMS_LOG
		WHERE 1=1 
		<if test="MEMBER_ID != ''">
	    	AND "MEMBER_ID" = #{MEMBER_ID}
	    </if>
		<if test="TYPE != ''">
	    	AND TYPE = #{TYPE}
	    </if>
		<if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
	    		    MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  MESSAGE LIKE '%${SEARCH_TEXT}%'
		    		OR  PHONE LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    	
	    </if>	    
	</select>

	<select id="getView" resultType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo" parameterType="String">
		SELECT /*AdminSmsLogMapper*/ * FROM TBL_SMS_LOG where MEMBER_ID = #{value};
	</select>

	<insert id="setInsert"	parameterType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo">
		INSERT INTO /*AdminSmsLogMapper*/ TBL_SMS_LOG (
			IDX,
			PHONE,
			MESSAGE,
			STATUS,
			CREATE_TM,
			UPDATE_TM,
			DELETE_TM,
			<if test="TYPE != ''">
			TYPE,
			</if>
			
			<if test="RESERVATION_TM != ''">
			RESERVATION_TM,
			</if>
			RESERVATION,
			MEMBER_ID
	
		) VALUES (
			0,
			#{PHONE},
			#{MESSAGE},
			0,
			now(),
			now(),
			null,
			<if test="TYPE != ''">
			#{TYPE},
			</if>
			<if test="RESERVATION_TM != ''">
			#{RESERVATION_TM},
			</if>
			#{RESERVATION},
			#{MEMBER_ID}
		) 
	</insert>

	<update id="setUpdate"	parameterType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo">
		UPDATE /*AdminSmsLogMapper*/ TBL_SMS_LOG SET 
			MESSAGE = #{MESSAGE}
		WHERE
			IDX = #{IDX} 
	</update>
	<update id="setUpdateSend"	parameterType="hashMap">
		UPDATE /*AdminSmsLogMapper*/ TBL_SMS_LOG SET 
			STATUS = #{STATUS},
			UPDATE_TM = now()
		WHERE
			IDX = #{IDX} 
	</update>
	
	
	
	<delete id="setDelete"	parameterType="egovframework.kaist.admin.sms_log.model.AdminSmsLogVo">
		DELETE FROM /*AdminSmsLogMapper*/
			TBL_SMS_LOG
		WHERE IDX =  #{IDX} 
	</delete>

    
</mapper>