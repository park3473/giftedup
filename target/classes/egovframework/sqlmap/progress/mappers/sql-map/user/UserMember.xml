<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kaist.user.member.service.impl.UserMemberMapper">
	 
	<select id="getListAll" resultType="hashMap" >
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER order by CREATE_TM desc
	</select>
	
	<select id="getListAllHuman" resultType="hashMap" >
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER WHERE DORMANCY = '1' order by CREATE_TM desc
	</select>
	
	<select id="getMatchingList" resultType="hashMap" parameterType="egovframework.kaist.user.program_apply.model.UserProgramApplyVo">
		SELECT /*USERMEMBERMAPPER*/ *
		,IFNULL((SELECT ATTEND FROM TBL_PROGRAM_APPLY WHERE MEMBER_ID = TBL_MEMBER.MEMBER_ID AND PROGRAM_IDX = #{PROGRAM_IDX}), 0) AS ATTEND
		,IFNULL((SELECT APPLY FROM TBL_PROGRAM_APPLY WHERE MEMBER_ID = TBL_MEMBER.MEMBER_ID AND PROGRAM_IDX = #{PROGRAM_IDX}), '-1') AS APPLY
		FROM 
			TBL_MEMBER, TBL_MATCHING
		WHERE
          	TBL_MEMBER.MEMBER_ID = TBL_MATCHING.MEMBER_ID
        AND 
        	TBL_MATCHING.PROFESSOR_MEMBER_ID = #{MEMBER_ID}
	 	ORDER BY TBL_MATCHING.MEMBER_ID ASC
	</select>
	
	
	
	<select id="getAdviserALL" resultType="hashMap" >
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER WHERE TYPE = '2' order by CREATE_TM desc
	</select>
	<select id="getListGroupBySchoolName" resultType="hashMap" >
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER GROUP BY SCHOOL_NAME ORDER BY SCHOOL_NAME desc
	</select>

	
	<select id="getList" resultType="hashMap" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER
		WHERE 1=1 
		
		<if test="DORMANCY != ''">
	    	AND DORMANCY = #{DORMANCY}
	    	
	    	<if test="START_TM != ''">
	 		<![CDATA[
	    	AND DORMANCY_TM >=  date_format(#{START_TM}, '%Y-%m-%d 00:00:00')
	    	AND DORMANCY_TM <=  date_format(#{END_TM}, '%Y-%m-%d 23:59:59')
	    	]]>
	     	</if>
	    
	    </if>
	    
	    <if test="LEVEL != ''">
	    	AND LEVEL = #{LEVEL}
	    </if>
	    
	    <if test="TYPE != ''">
	    	AND TYPE = #{TYPE}
	    </if>
	    
	    <if test="TYPE != ''">
	    	AND TYPE = #{TYPE}
	    </if>
	    
	    
		
	    
	    
	    
	    
	     <if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
		    		NAME LIKE '%${SEARCH_TEXT}%' 
		    		OR  MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  SCHOOL_NAME LIKE '%${SEARCH_TEXT}%'
		    		OR  PHONE LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    	
	    </if>
	    
	    
		order by UPDATE_TM desc
		LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>
	
	
	<select id="getMemberSchoolCnt" resultType="int" >
		SELECT count(*) FROM (SELECT /*UserMemberMapper*/ count(*) FROM TBL_MEMBER
		group by SCHOOL_NAME) AS A
	</select>
	
	<select id="getMemberTypeCnt" resultType="int" parameterType="string">
		SELECT /*UserMemberMapper*/ count(*) FROM TBL_MEMBER
		WHERE 1=1 AND TYPE = #{TYPE}

	</select>
	<select id="getListCnt" resultType="int" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT /*UserMemberMapper*/ count(*) FROM TBL_MEMBER
		WHERE 1=1 

		<if test="DORMANCY != ''">
	    	AND DORMANCY = #{DORMANCY}
	    	<if test="START_TM != ''">
	 		<![CDATA[
	    	AND DORMANCY_TM >=  date_format(#{START_TM}, '%Y-%m-%d 00:00:00')
	    	AND DORMANCY_TM <=  date_format(#{END_TM}, '%Y-%m-%d 23:59:59')
	    	]]>
	     	</if>
	    </if>
	    <if test="LEVEL != ''">
	    	AND LEVEL = #{LEVEL}
	    </if>
	    
	    <if test="TYPE != ''">
	    	AND TYPE = #{TYPE}
	    </if>

		<if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
		    		NAME LIKE '%${SEARCH_TEXT}%' 
		    		OR  MEMBER_ID LIKE '%${SEARCH_TEXT}%'
		    		OR  SCHOOL_NAME LIKE '%${SEARCH_TEXT}%'
		    		OR  PHONE LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if>
	    
	</select>

	<select id="getView" resultType="egovframework.kaist.user.member.model.UserMemberVo" parameterType="String">
		/*UserMemberMapper*/
		SELECT A.*
		       ,C.NAME AS PROF_NAME
		       ,C.SCHOOL_NAME AS PROF_SCHOOL_NAME
               ,C.EMAIL AS PROF_EMAIL
               ,C.PHONE AS PROF_PHONE
		  FROM TBL_MEMBER A
		  LEFT OUTER JOIN TBL_MATCHING B
	        ON B.MEMBER_ID = A.MEMBER_ID
		  LEFT OUTER JOIN TBL_MEMBER C
            ON C.MEMBER_ID = B.PROFESSOR_MEMBER_ID
		 WHERE A.MEMBER_ID = #{value}
		 ORDER BY B.YEAR DESC
		 LIMIT 1
	</select>
	
	
	<select id="getView2" resultType="egovframework.kaist.user.member.model.UserMemberVo" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT /*UserMemberMapper*/ * FROM TBL_MEMBER 
		where 
		1 = 1
		<if test="NAME !=''">
		AND NAME = #{NAME}
		</if>
		<if test="PHONE !=''">
		AND PHONE = #{PHONE}
		</if>
	</select>
	
	
<insert id="setInsert"	parameterType="egovframework.kaist.admin.member.model.AdminMemberVo">
		INSERT INTO /*AdminMemberMapper*/ TBL_MEMBER (
			MEMBER_ID,
			PASSWORD,
			NAME,
			PHONE,
			EMAIL,
			LEVEL,
			JOIN_TM,
			CREATE_TM,
			TYPE,
			TYPE_SUB,
			NAME_ENG,
			NAME_HANJA,
			IMAGE,
			ADDRESS_LOCAL,
			SCHOOL_NAME,
			SCHOOL_TYPE,
			SCHOOL_YEAR,
			SCHOOL_GROUP,
			SCHOOL_MAJOR,
			BIRTH,
			SEX,
			SCHOOL_ZIPCODE,
			SCHOOL_ADDRESS,
			SCHOOL_ADDRESS_DETAIL,
			SUPPORT_AREA,
			ZIPCODE,
			ADDRESS,
			ADDRESS_DETAIL,
			PARENTS_NAME,
			PARENTS_RELATION,
			PARENTS_PHONE,
			PARENTS_PHONE2,
			INFO_AGREEMENT,
			DORMANCY_TM,
			LOGIN_TM,
			UPDATE_TM,
			STATUS,
			SCHOOL_NUMBER,
			SCHOOL_JIGGEUB,
			TEL,
			AREA_NUMBER,
			INFO_UPDATE_TM
	
		) VALUES (
			#{MEMBER_ID},
			#{PASSWORD},
			#{NAME},
			#{PHONE},
			#{EMAIL},
			'10',
			now(),
			now(),
			#{TYPE},
			#{TYPE_SUB},
			#{NAME_ENG},
			#{NAME_HANJA},
			#{IMAGE},
			#{ADDRESS_LOCAL},
			#{SCHOOL_NAME},
			#{SCHOOL_TYPE},
			#{SCHOOL_YEAR},
			#{SCHOOL_GROUP},
			#{SCHOOL_MAJOR},
			#{BIRTH},
			#{SEX},
			#{SCHOOL_ZIPCODE},
			#{SCHOOL_ADDRESS},
			#{SCHOOL_ADDRESS_DETAIL},
			#{SUPPORT_AREA},
			#{ZIPCODE},
			#{ADDRESS},
			#{ADDRESS_DETAIL},
			#{PARENTS_NAME},
			#{PARENTS_RELATION},
			#{PARENTS_PHONE},
			#{PARENTS_PHONE2},
			0,
			null,
			null,
			now(),
			#{STATUS},
			#{SCHOOL_NUMBER},
			#{SCHOOL_JIGGEUB},
			#{TEL},
			#{AREA_NUMBER},
			now()
		) 
	</insert>

	<update id="setUpdate"	parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		UPDATE /*UserMemberMapper*/ TBL_MEMBER SET 
			<if test="PASSWORD !=''">
			PASSWORD = #{PASSWORD},
			</if>
			NAME = #{NAME},
			PHONE = #{PHONE},
			EMAIL = #{EMAIL},
			TYPE_SUB = #{TYPE_SUB},
			NAME_ENG = #{NAME_ENG},
			NAME_HANJA = #{NAME_HANJA},
			
			<if test="IMAGE !=''">
			IMAGE = #{IMAGE},
			</if>
			
			ADDRESS_LOCAL = #{ADDRESS_LOCAL},
			SCHOOL_NAME = #{SCHOOL_NAME},
			SCHOOL_TYPE = #{SCHOOL_TYPE},
			SCHOOL_YEAR = #{SCHOOL_YEAR},
		
			SCHOOL_GROUP = #{SCHOOL_GROUP},
			SCHOOL_MAJOR = #{SCHOOL_MAJOR},
			SEX = #{SEX},
			BIRTH = #{BIRTH},
			SCHOOL_ZIPCODE = #{SCHOOL_ZIPCODE},
			SCHOOL_ADDRESS = #{SCHOOL_ADDRESS},
			SCHOOL_ADDRESS_DETAIL = #{SCHOOL_ADDRESS_DETAIL},
			SUPPORT_AREA = #{SUPPORT_AREA},
			ZIPCODE = #{ZIPCODE},
			ADDRESS = #{ADDRESS},
			ADDRESS_DETAIL = #{ADDRESS_DETAIL},
			PARENTS_NAME = #{PARENTS_NAME},
			
			PARENTS_RELATION = #{PARENTS_RELATION},
			PARENTS_PHONE = #{PARENTS_PHONE},
			PARENTS_PHONE2 = #{PARENTS_PHONE2},
			INFO_UPDATE_TM = now()
		WHERE
			MEMBER_ID = #{MEMBER_ID} 
	</update>
	
	
	<delete id="setDelete"	parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		DELETE FROM /*UserMemberMapper*/
			TBL_MEMBER
		WHERE MEMBER_ID =  #{MEMBER_ID} 
	</delete>



	<update id="setUpdateLoginTm"	parameterType="string">
		UPDATE /*UserMemberMapper*/ TBL_MEMBER SET 
			LOGIN_TM = now(),
			UPDATE_TM = now()
		WHERE
			MEMBER_ID = #{value} 
	</update>
	
	<update id="setUpdateTypeToText"	parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		UPDATE /*UserMemberMapper*/ TBL_MEMBER SET 
			${SEARCH_TYPE} = #{SEARCH_TEXT},
			<if test="SEARCH_TYPE == 'DORMANCY'">
	    		DORMANCY_TM = now(),
	   		</if>
	   		
	   		<if test="SEARCH_TYPE == 'INFO_AGREEMENT'">
	    		INFO_AGREEMENT_TM = now(),
	   		 </if> 
	   		 
			
			UPDATE_TM = now()
		WHERE
			MEMBER_ID = #{MEMBER_ID} 
	</update>
	
	<select id="getProfessorList" parameterType="egovframework.kaist.user.member.model.UserMemberVo" resultType="hashMap">
		/*UserMemberMapper*/
		SELECT *
		  FROM (
		        SELECT MEMBER_ID, YEAR , SUPPORT_GROUP AS MATCHING_SCHOOL_YEAR 
		          FROM TBL_MATCHING
		         WHERE PROFESSOR_MEMBER_ID = #{MEMBER_ID}) MATCHING, TBL_MEMBER MEM
		 WHERE MEM.TYPE = #{TYPE}
		   AND MATCHING.MEMBER_ID = MEM.MEMBER_ID

	    <if test="YEAR != ''">
    		 AND MATCHING.YEAR = #{YEAR}
    	</if>
	    			
		<if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
	    		    MEM.PHONE LIKE '%${SEARCH_TEXT}%'
		    		OR  MEM.NAME LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND MEM.${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if>
	    ORDER BY MEM.MEMBER_ID , YEAR
	</select>
	
	<select id="getProfessorListCnt" parameterType="egovframework.kaist.user.member.model.UserMemberVo" resultType="int">
		SELECT /*UserMemberMapper*/ COUNT(*) FROM 
		(SELECT MEMBER_ID, YEAR FROM TBL_MATCHING
		WHERE PROFESSOR_MEMBER_ID = #{MEMBER_ID}) MATCHING, TBL_MEMBER MEM
		WHERE MEM.TYPE = #{TYPE}
		AND MATCHING.MEMBER_ID = MEM.MEMBER_ID
		<if test="YEAR != ''">
    		 AND MATCHING.YEAR = #{YEAR}
    	</if>
		<if test="SEARCH_TEXT != ''">
		     <if test="SEARCH_TYPE == 'ALL'">
		    	AND (
	    		    MEM.PHONE LIKE '%${SEARCH_TEXT}%'
		    		OR  MEM.NAME LIKE '%${SEARCH_TEXT}%'
		    		) 
		    </if>
		    <if test="SEARCH_TYPE != 'ALL'">
	    		 AND MEM.${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
	    	</if>
	    </if>
	</select>
	
	<select id="getID" resultType="string" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT MEMBER_ID
		FROM TBL_MEMBER
		WHERE NAME = #{NAME} AND PHONE LIKE '%${PHONE}'
		ORDER BY CREATE_TM DESC LIMIT 1
	</select>
	
	<select id="getPortfolioUserView" resultType="egovframework.kaist.user.member.model.UserMemberVo" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		/*UserMemberMapper*/
		SELECT A.*
		       ,C.NAME AS PROF_NAME
		       ,C.SCHOOL_NAME AS PROF_SCHOOL_NAME
               ,C.EMAIL AS PROF_EMAIL
               ,C.PHONE AS PROF_PHONE
		  FROM TBL_MEMBER A
		  LEFT OUTER JOIN TBL_MATCHING B
	        ON B.MEMBER_ID = A.MEMBER_ID
		  LEFT OUTER JOIN TBL_MEMBER C
            ON C.MEMBER_ID = B.PROFESSOR_MEMBER_ID
		 WHERE A.MEMBER_ID = #{MEMBER_ID}
		 AND B.YEAR = #{YEAR};
		 
	</select>
	
	<select id="getPortfolioYearView" resultType="egovframework.kaist.user.member.model.UserMemberVo" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		/*UserMemberMapper*/
		SELECT A.*
		       ,C.NAME AS PROF_NAME
		       ,C.SCHOOL_NAME AS PROF_SCHOOL_NAME
               ,C.EMAIL AS PROF_EMAIL
               ,C.PHONE AS PROF_PHONE
		  FROM TBL_MEMBER A
		  LEFT OUTER JOIN TBL_MATCHING B
	        ON B.MEMBER_ID = A.MEMBER_ID
		  LEFT OUTER JOIN TBL_MEMBER C
            ON C.MEMBER_ID = B.PROFESSOR_MEMBER_ID
		 WHERE A.MEMBER_ID = #{MEMBER_ID}
		 AND B.YEAR = #{YEAR}
	</select>
	
	<update id="setPassWordReset" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		UPDATE TBL_MEMBER WHERE PASSWORD = '03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4'
		WHERE MEMBER_ID = #{MEMBER_ID}
	
	</update>
	
</mapper>