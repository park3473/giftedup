<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kaist.user.communicator.service.impl.UserCommunicatorMapper">
	<!-- 일반 -->
	<select id="getCommList" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT DISTINCT * , (SELECT COUNT(*) FROM TBL_COMM_STUDENT WHERE COMM_IDX = TBL_COMMUNICATOR.COMM_IDX) AS COMM_PERSONNEL_CNT
		FROM TBL_COMMUNICATOR
		WHERE (COMM_STAT = 1 OR COMM_STAT = 2)
		<if test="COMM_SCHOOL_YEAR != ''">
		AND	COMM_SCHOOL_YEAR LIKE '%${COMM_SCHOOL_YEAR}%'
		</if>
		<if test="COMM_LOCAL != ''">
		AND COMM_LOCAL != #{COMM_LOCAL}
		</if>
		<if test="COMM_TYPE != ''">
		AND COMM_TYPE = #{COMM_TYPE}
		</if>
		<if test="SEARCH_TEXT != ''">
			<if test="SEARCH_TYPE != 'ALL'">
				AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
			</if>
			<if test="SEARCH_TYPE == 'ALL'">
				AND (
					COMM_MENTO_NAME LIKE '%${SEARCH_TEXT}%'
					OR COMM_NAME LIKE '%${SEARCH_TEXT}%'
				)
			</if>
		</if>
		<if test="COMM_START_TM != ''">
			AND DATE_FORMAT(COMM_START_TM,'%Y.%m.%d') = '${COMM_START_TM}'
		</if>
		AND COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
		LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>
	<select id="getCommListCnt" resultType="int" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COUNT(*) FROM TBL_COMMUNICATOR
		WHERE 1 = 1
		AND (COMM_STAT = 1 OR COMM_STAT = 2)
		<if test="COMM_SCHOOL_YEAR != ''">
		AND	COMM_SCHOOL_YEAR LIKE '%${COMM_SCHOOL_YEAR}%'
		</if>
		<if test="COMM_LOCAL != ''">
		AND COMM_LOCAL != #{COMM_LOCAL}
		</if>
		<if test="COMM_TYPE != ''">
		AND COMM_TYPE = #{COMM_TYPE}
		</if>
		<if test="SEARCH_TEXT != ''">
			<if test="SEARCH_TYPE != 'ALL'">
				AND ${SEARCH_TYPE} LIKE '%${SEARCH_TEXT}%'
			</if>
			<if test="SEARCH_TYPE == 'ALL'">
				AND (
					COMM_MENTO_NAME LIKE '%${SEARCH_TEXT}%'
					OR COMM_NAME LIKE '%${SEARCH_TEXT}%'
				)
			</if>
		</if>
		<if test="COMM_START_TM != ''">
			AND DATE_FORMAT(COMM_START_TM,'%Y.%m.%d') = '${COMM_START_TM}'
		</if>
		AND COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	
	<!-- 학생 type comm list -->
	<select id="getStudentList" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COMM.* , (SELECT COUNT(*) FROM TBL_COMM_STUDENT WHERE COMM_IDX = COMM.COMM_IDX) AS COMM_PERSONNEL_CNT
		FROM TBL_COMMUNICATOR COMM JOIN TBL_COMM_STUDENT STU 
		WHERE COMM.COMM_IDX = STU.COMM_IDX
		AND STU.STU_MEMBER_ID = #{STU_MEMBER_ID}
		<if test="YEAR != ''">
		AND DATE_FORMAT(COMM_START_TM,'%Y%m%d') BETWEEN #{PREVIOUS} AND #{NEXT}
		</if>
		AND COMM.COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	<select  id="getStudentListCnt" resultType="int" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COUNT(*) FROM TBL_COMMUNICATOR COMM JOIN TBL_COMM_STUDENT STU 
		WHERE COMM.COMM_IDX = STU.COMM_IDX
		AND STU.STU_MEMBER_ID = #{STU_MEMBER_ID}
		AND COMM.COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	<select id="getStudentNowList" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COMM.* , (SELECT COUNT(*) FROM TBL_COMM_STUDENT WHERE COMM_IDX = COMM.COMM_IDX) AS COMM_PERSONNEL_CNT
		FROM TBL_COMMUNICATOR COMM JOIN TBL_COMM_STUDENT STU 
		WHERE COMM.COMM_IDX = STU.COMM_IDX
		AND STU.STU_MEMBER_ID = #{STU_MEMBER_ID} AND ( COMM.COMM_STAT = 3 OR COMM.COMM_STAT = 4)
		ORDER BY COMM_START_TM
	</select>
	
	
	<!-- 교사 type comm list -->
	<select id="getMentoList" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT * , (SELECT COUNT(*) FROM TBL_COMM_STUDENT WHERE COMM_IDX = TBL_COMMUNICATOR.COMM_IDX) AS COMM_PERSONNEL_CNT
		FROM TBL_COMMUNICATOR
		WHERE COMM_MENTO = #{COMM_MENTO}
		AND COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	<select id="getMentoListCnt" resultType="int" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COUNT(*) FROM TBL_COMMUNICATOR
		WHERE COMM_MENTO = #{COMM_MENTO}
		AND COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	<select id="getMentoNowList" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT * , (SELECT COUNT(*) FROM TBL_COMM_STUDENT WHERE COMM_IDX = TBL_COMMUNICATOR.COMM_IDX) AS COMM_PERSONNEL_CNT
		FROM TBL_COMMUNICATOR
		WHERE COMM_MENTO = #{COMM_MENTO}
		AND (COMM_STAT = 3 OR COMM_STAT = 4)
		AND COMM_YEAR = '2023'
		ORDER BY COMM_START_TM
	</select>
	
	<select id="getStudentPersonnelList" resultType="hashMap" parameterType="egovframework.kaist.user.communicator.model.UserCommStudentVo">
		SELECT c.* , m.* , m2.NAME AS MENTO_NAME ,  m2.PHONE AS MENTO_PHONE
		FROM TBL_COMM_STUDENT c JOIN TBL_MEMBER m JOIN TBL_MEMBER m2 JOIN TBL_MATCHING matching 
		WHERE m.MEMBER_ID = c.STU_MEMBER_ID
		AND m.MEMBER_ID = matching.MEMBER_ID
		AND m2.MEMBER_ID = matching.PROFESSOR_MEMBER_ID 
		and c.COMM_IDX = #{COMM_IDX}
		AND matching.year = '2023'
		
	</select>
	
	<select id="getStudentPersonnelListIdx" resultType="hashMap" parameterType="String">
		SELECT c.* , m.* , m2.NAME AS MENTO_NAME ,  m2.PHONE AS MENTO_PHONE
		FROM TBL_COMM_STUDENT c JOIN TBL_MEMBER m JOIN TBL_MEMBER m2 JOIN TBL_MATCHING matching 
		WHERE m.MEMBER_ID = c.STU_MEMBER_ID
		AND m.MEMBER_ID = matching.MEMBER_ID
		AND m2.MEMBER_ID = matching.PROFESSOR_MEMBER_ID 
		and c.COMM_IDX = #{value}
		AND matching.year = '2023'
	</select>
	
	<select id="getMentoStat" resultType="egovframework.kaist.user.member.model.UserMemberVo" parameterType="egovframework.kaist.user.member.model.UserMemberVo">
		SELECT * FROM TBL_MEMBER WHERE MEMBER_ID = #{MEMBER_ID}
	</select>
	
	<insert id="setSupplies" parameterType="egovframework.kaist.user.communicator.model.UserSuppliesVo">
		INSERT INTO TBL_COMM_SUPPLIES (COMM_IDX , SUP_NAME , SUP_LINK , SUP_AMOUNT , SUP_PRICE)
		VALUES (#{COMM_IDX} , #{SUP_NAME} , #{SUP_LINK} , #{SUP_AMOUNT} , #{SUP_PRICE})
	</insert>
	
	<insert id="setComm" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" useGeneratedKeys="true" keyProperty="COMM_IDX">
		INSERT INTO TBL_COMMUNICATOR (COMM_NAME , COMM_SUPPLIES , COMM_PERSONNEL , COMM_STAT , COMM_START_TM , COMM_END_TM , COMM_MENTO , COMM_EMAIL , COMM_MENTO_NAME , COMM_TYPE , COMM_SCHOOL_YEAR , COMM_SCHOOL_NAME , COMM_FILE , COMM_SUMMARY , COMM_TIME , COMM_CREATE_TM , COMM_UPDATE_TM , COMM_YEAR , COMM_ON_ID , COMM_ON_PW , COMM_ON_LINK)
		VALUES (#{COMM_NAME} , #{COMM_SUPPLIES} , #{COMM_PERSONNEL} , '0' , #{COMM_START_TM} , #{COMM_END_TM} , #{COMM_MENTO} , #{COMM_EMAIL} , #{COMM_MENTO_NAME} , #{COMM_TYPE} , #{COMM_SCHOOL_YEAR} , #{COMM_SCHOOL_NAME} , #{COMM_FILE} , #{COMM_SUMMARY} , #{COMM_TIME} , now() , now() , '2023' , #{COMM_ON_ID} , #{COMM_ON_PW} , #{COMM_ON_LINK})
	</insert>
	
	
	<select id="getView" resultType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT * FROM TBL_COMMUNICATOR
		WHERE COMM_IDX = #{COMM_IDX}
	</select>
	<select id="getSupList" resultType="hashMap" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT * FROM TBL_COMM_SUPPLIES
		WHERE COMM_IDX = #{COMM_IDX}
	</select>
	
	<select id="getPersonnelCnt" resultType="int" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		SELECT COUNT(*) FROM TBL_COMM_STUDENT
		WHERE COMM_IDX = #{COMM_IDX}
	</select>
	
	<delete id="DelComm" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		DELETE FROM TBL_COMMUNICATOR WHERE COMM_IDX = #{COMM_IDX}
	</delete>
	
	
	<update id="UpCOMM" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		UPDATE TBL_COMMUNICATOR
		SET COMM_NAME = #{COMM_NAME},
			COMM_TYPE = #{COMM_TYPE},
			COMM_SUPPLIES = #{COMM_SUPPLIES},
			COMM_PERSONNEL = #{COMM_PERSONNEL},
			COMM_START_TM = #{COMM_START_TM},
			COMM_END_TM = #{COMM_END_TM},
			COMM_MENTO = #{COMM_MENTO},
			COMM_EMAIL = #{COMM_EMAIL},
			COMM_MENTO_NAME = #{COMM_MENTO_NAME},
			COMM_SCHOOL_YEAR = #{COMM_SCHOOL_YEAR},
			COMM_SCHOOL_NAME = #{COMM_SCHOOL_NAME},
			<if test="COMM_FILE != ''">
				COMM_FILE = #{COMM_FILE},
			</if>
			COMM_SUMMARY = #{COMM_SUMMARY},
			COMM_TIME = #{COMM_TIME},
			COMM_UPDATE_TM = now()
		WHERE COMM_IDX = #{COMM_IDX}
	</update> 
	
	<update id="UpSupplies" parameterType="egovframework.kaist.user.communicator.model.UserSuppliesVo">
		UPDATE TBL_COMM_SUPPLIES
		SET SUP_NAME =#{SUP_NAME} ,
			SUP_LINK =#{SUP_LINK} ,
			SUP_AMOUNT=#{SUP_AMOUNT} ,
			SUP_PRICE=#{SUP_PRICE}
		WHERE COMM_IDX = #{COMM_IDX}
		AND SUP_IDX = #{SUP_IDX}
	</update>
	
	<insert id="setStudentParticipate" parameterType="egovframework.kaist.user.communicator.model.UserCommStudentVo">
		INSERT INTO TBL_COMM_STUDENT(COMM_IDX , STU_MEMBER_ID , STU_NAME , STU_PHONE , STU_SCHOOL_NAME , STU_SCHOOL_YEAR , STU_CREATE_TM , STU_ADDRESS)
		VALUES(#{COMM_IDX} , #{STU_MEMBER_ID}  , #{STU_NAME} , #{STU_PHONE} , #{STU_SCHOOL_NAME} , #{STU_SCHOOL_YEAR} , now() , #{STU_ADDRESS})
	</insert>
	
	<select id="getCommTimeCnt" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo" resultType="int">
		SELECT COUNT(*) FROM TBL_COMMUNICATOR
		WHERE DATE_FORMAT(COMM_START_TM,'%Y.%m.%d') = #{COMM_START_TM}
		AND COMM_TIME = #{COMM_TIME}
		AND COMM_IDX != #{COMM_IDX}
	</select>
	
	
	<update id="setCommStat" parameterType="egovframework.kaist.user.communicator.model.UserCommunicatorVo">
		UPDATE TBL_COMMUNICATOR
		SET COMM_STAT = #{COMM_STAT}
		WHERE COMM_IDX = #{COMM_IDX}
	</update>
	
	<select id="getZoomList" resultType="egovframework.kaist.user.communicator.model.UserZoomVo" parameterType="egovframework.kaist.user.communicator.model.UserZoomVo">
		SELECT * 
		FROM TBL_ZOOM Z LEFT OUTER JOIN TBL_ZOOM_LOG L 
		ON Z.ZOOM_ID = L.ZOOM_ID 
		AND DATE_FORMAT(L.ZOOM_DT,'%Y%m%d') =  #{ZOOM_DT}
		AND L.ZOOM_TYPE = #{ZOOM_TYPE}
		WHERE L.ZOOM_ID IS NULL
		ORDER BY Z.ZOOM_ID
	</select>
	
	<!-- 시스템 변경으로 인한 제거 zoom 변경 -->
	<update id="setZoomMember" parameterType="egovframework.kaist.user.communicator.model.UserZoomVo">
		UPDATE TBL_ZOOM
		SET ZOOM_MEMBER_ID = #{ZOOM_MEMBER_ID} , ZOOM_STAT = #{ZOOM_STAT}
		WHERE ZOOM_ID = #{ZOOM_ID}
	</update>
	
	<select id="getZoom" resultType="egovframework.kaist.user.communicator.model.UserZoomVo" parameterType="egovframework.kaist.user.communicator.model.UserZoomVo">
		SELECT * FROM TBL_ZOOM_LOG L JOIN TBL_ZOOM Z ON L.ZOOM_ID = Z.ZOOM_ID
		WHERE L.ZOOM_MEMBER_ID = #{ZOOM_MEMBER_ID}
		AND DATE_FORMAT(L.ZOOM_DT,'%Y%m%d') = #{ZOOM_DT}
		AND L.ZOOM_TYPE = #{ZOOM_TYPE}
	</select>
	
	<select id="getZoomView" resultType="hashMap" parameterType="egovframework.kaist.user.communicator.model.UserZoomVo">
		SELECT * FROM TBL_ZOOM_LOG L JOIN TBL_ZOOM Z ON L.ZOOM_ID = Z.ZOOM_ID
		WHERE L.ZOOM_MEMBER_ID = #{ZOOM_MEMBER_ID}
		AND DATE_FORMAT(L.ZOOM_DT,'%Y%m%d') = #{ZOOM_DT}
		AND L.ZOOM_TYPE = #{ZOOM_TYPE}
	</select>
	
	<update id="setStudentEval" parameterType="egovframework.kaist.user.communicator.model.UserCommStudentVo">
		UPDATE TBL_COMM_STUDENT
		SET STU_EVAL = #{STU_EVAL}
		WHERE COMM_IDX = #{COMM_IDX}
		AND STU_IDX = #{STU_IDX}
	</update> 
	
	<delete id="setStudentDelete" parameterType="egovframework.kaist.user.communicator.model.UserCommStudentVo">
		DELETE FROM TBL_COMM_STUDENT WHERE COMM_IDX = #{COMM_IDX} AND STU_MEMBER_ID = #{STU_MEMBER_ID}
	</delete>
	
	<insert id="setZoomLog" parameterType="egovframework.kaist.user.communicator.model.UserZoomVo">
		INSERT INTO TBL_ZOOM_LOG (ZOOM_ID , ZOOM_TYPE , ZOOM_DT , ZOOM_CREATE_TM , ZOOM_MEMBER_ID)
		VALUES (#{ZOOM_ID} , #{ZOOM_TYPE} , #{ZOOM_DT} , now() , #{ZOOM_MEMBER_ID})
	</insert>
	
</mapper>